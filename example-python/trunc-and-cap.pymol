from pymol import editor,cmd,stored
import numpy
cmd.load("complex_solv.pdb")
# select & remove all non A altlocs
cmd.remove( "not alt ''+A" )
# reset the PDB information
cmd.alter("all", "alt=''")
# select zone to remove
cmd.select("12A_model","(byres (all within 12 of resn X01)) and (name ca)")
#
stored.list=[]
cmd.iterate("12A_model", "stored.list.append(resi)")
## residue numbers are returned as strings, they need to be converted to integers
list_of_residues=[int(x) for x in stored.list]
# now we determine if sequences are divides by 2 residues (too short for both Me caps)
list1=numpy.array(list_of_residues[:-1])
list2=numpy.array(list_of_residues[1:])
indices=numpy.where(list2 == list1+2)[0]
for index in indices:
    a=(list2[index]+list1[index])/2
    list_of_residues.append(int(a.astype(numpy.int64)))
list_of_residues.sort()
# select residues in the new residue list
cmd.select("12A_model", "resi " + ",".join(str(res) for res in list_of_residues))
# remove residues outside of radius
cmd.remove("not(12A_model)")
# identify consecutive spans
ranges=sum((list(t) for t in zip(list_of_residues, list_of_residues[1:]) if t[0]+1 != t[1]), [])
starts_and_ends=list_of_residues[0:1] + ranges + list_of_residues[-1:]
starts=starts_and_ends[::2]
ends=starts_and_ends[1::2]
## write ACE residues
for i in starts :
    editor.attach_amino_acid("resi " + str(i) + " and name N", "ace")
## write NME residues
for i in ends :
    editor.attach_amino_acid("resi " + str(i) + " and name C", "nme")
# save pdb
cmd.set("pdb_use_ter_records",0)
cmd.save("receptor_capped_12A.pdb")
